<?php
class WellCMSEditController extends CMSAbstractControllerEdit {
        
        protected $trajectory = null;
        protected $trajectoryParams = null;
        protected $sectionNumber = null;
        protected $trajectoryTable = null;
        protected $trajectory3DRender = null;
        protected $trajectory3DRenderParam = null;
        
	public function getMenuItemDescription() {
		return 'Well';
	}

	protected function getDAOClass() {
		return 'WellDAO';
	}
	
	protected function initRecordManyToManyRelations() {}

	protected function initMultiselectRelations() {}
	
	/*protected function initActions() {
		$this->availableActions = array('Save');
		/*if ($this->record['faqItemState'] == 'visible') {
			$this->availableActions[] = 'Hide';
		} else {
			$this->availableActions[] = 'Show';
		}*/
		/*if(!empty($this->record['id']) && !$this->dao->hasRelatedRecords($this->record)) {
			$this->availableActions[] = 'Delete';
		}
	}*/
        
        public function prepareData() {
                parent::prepareData();
                $trajectory = new TrajectoryVariant();
                $this->calculateTrajectory();
            
            
        }
        protected function initForm() {
		$siteId = CoreServices2::getRequest()->getFromGet('site');
		$this->form = new CoreForm(
			'post',
			CoreServices::get('url')->createHTML('_m', 'Well', '_o', 'CMSEdit', 'site', $siteId)
		);
	}

         protected function createWellTypeField() {
		$options = CoreConfig::get('Data', 'wellType');
                //$options['2d'] = '2D';
                //$options['3d'] = '3D';
		$this->form->addField(new CoreFormFieldSelect(
			'wellType',
			null,
			$options
		));
	}
        
        protected function createWellTrajectoryField() {
		$options = CoreConfig::get('Data', 'wellTrajectory');
		$this->form->addField(new CoreFormFieldSelect(
			'wellTrajectory',
			null,
			$options
		));
	}
        
	protected function createFormFields() {
		parent::createFormFields();
		//$this->form->addField(new CoreFormFieldSelectAjax('Id'));
                
		$this->form->addField(new CoreFormFieldText('wellName'));
                $this->form->addField(new CoreFormFieldText('wellDescription'));
                $this->form->addField(new CoreFormFieldText('wellUWI'));
                $this->form->addField(new CoreFormFieldText('wellAPI'));
                $this->form->addField(new CoreFormFieldText('wellSlot'));
                $this->form->addField(new CoreFormFieldText('wellTedit'));
                $this->createWellTypeField();
                $this->createWellTrajectoryField();
                
                $this->form->addField(new CoreFormFieldText('A'));
                $this->form->addField(new CoreFormFieldText('A1'));
                $this->form->addField(new CoreFormFieldText('A2'));
                $this->form->addField(new CoreFormFieldText('A3'));
                $this->form->addField(new CoreFormFieldText('A4'));
                
                $this->form->addField(new CoreFormFieldText('H'));
                $this->form->addField(new CoreFormFieldText('H1'));
                $this->form->addField(new CoreFormFieldText('H2'));
                $this->form->addField(new CoreFormFieldText('H3'));
                $this->form->addField(new CoreFormFieldText('H4'));
                
                $this->form->addField(new CoreFormFieldText('L'));
                $this->form->addField(new CoreFormFieldText('L1'));
                $this->form->addField(new CoreFormFieldText('L2'));
                $this->form->addField(new CoreFormFieldText('L3'));
                $this->form->addField(new CoreFormFieldText('L4'));
                $this->form->addField(new CoreFormFieldText('L5'));
                
                $this->form->addField(new CoreFormFieldText('R'));
                $this->form->addField(new CoreFormFieldText('R1'));
                $this->form->addField(new CoreFormFieldText('R2'));
                $this->form->addField(new CoreFormFieldText('R3'));
                $this->form->addField(new CoreFormFieldText('R4'));
                
                $this->form->addField(new CoreFormFieldText('alfa'));
                $this->form->addField(new CoreFormFieldText('alfa1'));
                $this->form->addField(new CoreFormFieldText('alfa2'));
                $this->form->addField(new CoreFormFieldText('alfa3'));
                $this->form->addField(new CoreFormFieldText('alfa4'));
                
                $this->form->addField(new CoreFormFieldText('delta'));
                $this->form->addField(new CoreFormFieldText('delta1'));
                $this->form->addField(new CoreFormFieldText('delta2'));
                $this->form->addField(new CoreFormFieldText('delta3'));
                $this->form->addField(new CoreFormFieldText('delta4'));
                
                $this->form->addField(new CoreFormFieldText('DLS'));
                $this->form->addField(new CoreFormFieldText('DLS1'));
                $this->form->addField(new CoreFormFieldText('DLS2'));
                $this->form->addField(new CoreFormFieldText('DLS3'));
                $this->form->addField(new CoreFormFieldText('DLS4'));
  
                //$this->form->addField(new CoreFormFieldText('wellType'));
                
                $this->form->addField(new CoreFormFieldText('wellTrajectoryVariant'));
                //$this->form->addField(new CoreFormFieldText('companySurveyCalcMethod'));
	}

	protected function addFormValidators() {
		//$this->form->addValidator(new UserValidatorActiveUserId());
		//$this->form->addValidator(new AuthorValidatorSingleAuthorForUserId());
		$this->form->addValidator(new CoreFormValidatorNotEmpty('wellName'));
		$this->form->addValidator(new CoreFormValidatorMaxTextLength('wellName', 100));
                
                $fields = $this->form->getField("wellTrajectoryVariant")->getValue();
                $filedsNames = explode("_",$fields);
                $trajectory = array_shift($filedsNames);
                foreach($filedsNames as $field){
                    $this->form->addValidator(new CoreFormValidatorNotEmpty($field));
                    $this->form->addValidator(new CoreFormValidatorIsNumber($field));
                }
                
                
	}

	protected function setSpecialRecordFieldsBeforeSave() {
                $siteId = CoreServices2::getRequest()->getFromGet('site');
                //print_r($this->record);
		if(empty($this->record['id'])) {
			$this->record['siteId'] = $siteId;
		}
	}

	protected function afterSave() {}
        
        protected function handleDeleteRequest() {
		parent::handleDeleteRequest();
		$this->setRedirectAddress(CoreServices2::getUrl()->createAddress(
					'_m', 'Home',
					'_o', 'CMSEdit'
				));
		
	}
        
        protected function calculateTrajectory(){
            // sprawdzić czy:
            // 1. jest pole zawierające trajektorię?
            // 2. czy klasa zawiera taką metodę?
            //jeśli tak to liczymy pozostałe parametry i wyznaczamy trajektorię
            // 
            $this->trajectory = new TrajectoryVariant();
            if ($this->record['wellTrajectory'] == 'J1'){
                $this->sectionNumber = 2;
                
            }
            if ($this->record['wellTrajectory'] == 'J2'){
                $this->sectionNumber = 3;
            }
            if ($this->record['wellTrajectory'] == 'J3'){
                $this->sectionNumber = 5;
                
            }
            if ($this->record['wellTrajectory'] == 'S1'){
                $this->sectionNumber = 3;
                
            }
            if ($this->record['wellTrajectory'] == 'S2'){
                $this->sectionNumber = 4;
                
            }
            if ($this->record['wellTrajectory'] == 'S3'){
                $this->sectionNumber = 4;
                
            }
            if ($this->record['wellTrajectory'] == 'S4'){
                $this->sectionNumber = 5;
                
            }
        
            if(method_exists($this->trajectory, $this->record['wellTrajectoryVariant'])){
                    $trajectoryMethod = $this->record['wellTrajectoryVariant'];
                    $methodParameters = array();
                    $parameters = explode("_", $this->record['wellTrajectoryVariant']);
                    array_shift($parameters);
                    //print_r($parameters);
                    foreach ($parameters as $parameter){
                        $methodParameters[$parameter] = $this->record[$parameter];
                    }
                    //print_r($methodParameters);
                    //print_r($trajectoryMethod);
                    $this->trajectoryParams = call_user_func_array(array($this->trajectory, $trajectoryMethod), $methodParameters);
                    if (!empty($this->trajectoryParams['error'])){
                        $this->errorMessageContainer = new CoreFormValidationMessageContainer();
			$this->errorMessageContainer->addMessage('parametrError');
                        return 0;
                    }
                            //$this->trajectory->$trajectoryMethod(extract($methodParameters));
                    
                    
                    
                    $algoritm = new TrajectoryAlgoritm();
                    
                    $step = 10;
                    $azimut = 0;
                    $this->trajectoryTable = $algoritm->calculateCoordinates($this->sectionNumber, $this->trajectoryParams['A'], $this->trajectoryParams['H'], $this->trajectoryParams['L'], $this->trajectoryParams['alfa'], $this->trajectoryParams['delta'], $this->trajectoryParams['DLS'], $this->trajectoryParams['R'], $azimut, $step);
                    
                    //print_r($this->trajectoryTable);
                    
                    foreach($this->trajectoryTable as $key => $trajectoryTableElement){
                            $this->trajectoryTable[$key]['alfa'] = rad2deg($trajectoryTableElement['alfa']);
                            $this->trajectoryTable[$key]['beta'] = rad2deg($trajectoryTableElement['beta']); 
                    }
                    
                    for($i=1;$i<=$this->sectionNumber;$i++){
                         $this->trajectoryParams['alfa'][$i] = rad2deg($this->trajectoryParams['alfa'][$i]);
                         $this->trajectoryParams['delta'][$i] = rad2deg($this->trajectoryParams['delta'][$i]);
                    }
                    if (!empty($this->trajectoryTable)){
                        $xmax = 0;
                        $ymax = 0;
                        $zmax = 0;
                        $mdmax = 0;
                        $tmpArr = array();
                        foreach($this->trajectoryTable as $element){
                            if ($xmax < $element['X']) $xmax = $element['X'];
                            if ($ymax < $element['Y']) $ymax = $element['Y'];
                            if ($zmax < $element['Z']) $zmax = $element['Z'];
                            if ($mdmax < $element['MD']) $mdmax = $element['MD'];
                            //print_r($element);
                            $tmpArr['x'] =  -1 * $element['X'];   
                            $tmpArr['y'] =  -1 * $element['Y']; 
                            $tmpArr['z'] =  -1 * $element['Z']; 
                            $tmpArr['md'] =  -1 * $element['MD']; 
                            $this->trajectory3DRender[1][] =  $tmpArr;
                        }
                        
                        $this->trajectory3DRenderParam[1]['xMax'] = -1 * $xmax;
                        $this->trajectory3DRenderParam[1]['yMax'] = -1 * $ymax;
                        $this->trajectory3DRenderParam[1]['zMax'] = -1 * $zmax;
                        $this->trajectory3DRenderParam[1]['mdMax'] = -1 * $mdmax;
                            
                    }
                    //print_r($this->trajectoryParams);
            }    

        }
        
        public function assignDisplayVariables() {
		parent::assignDisplayVariables();
                $display = CoreServices::get('display');
		$display->assign('sectionNumber', $this->sectionNumber);
                if (empty($this->trajectoryParams['error'])){
                    $display->assign('trajectoryParamsA', $this->trajectoryParams["A"]);
                    $display->assign('trajectoryParamsH', $this->trajectoryParams["H"]);
                    $display->assign('trajectoryParamsL', $this->trajectoryParams["L"]);
                    $display->assign('trajectoryParamsR', $this->trajectoryParams["R"]);
                    $display->assign('trajectoryParamsAlfa', $this->trajectoryParams["alfa"]);
                    $display->assign('trajectoryParamsDelta', $this->trajectoryParams["delta"]);
                    $display->assign('trajectoryParamsDLS', $this->trajectoryParams["DLS"]);
                }
                $display->assign('trajectoryTable', $this->trajectoryTable);
                $display->assign('trajectory3DRender', $this->trajectory3DRender);
                $display->assign('trajectory3DRenderParam', $this->trajectory3DRenderParam);
        }

}
?>