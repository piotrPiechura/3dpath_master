 {if !empty($trajectory)}
    <script src="assets/js/3dTree/Three.js"></script>
    <script src="assets/js/3dTree/Detector.js"></script>
    <script src="assets/js/3dTree/Stats.js"></script>
    <script src="assets/js/3dTree/OrbitControls.js"></script>
    
    <script src="assets/js/3dTree/js/cameras/CombinedCamera.js"></script>
    <script src="assets/js/3dTree/js/renderers/Projector.js"></script>
    <script src="assets/js/3dTree/js/renderers/CanvasRenderer.js"></script>
                
    <script src="assets/js/3dTree/THREEx.KeyboardState.js"></script>
    <script src="assets/js/3dTree/THREEx.FullScreen.js"></script>
    <script src="assets/js/3dTree/THREEx.WindowResize.js"></script>
    
    <div class="row"> 
        <div class="col-md-12 nocsroll">
           <div class="grid simple">
                <div class="grid-title">
                
                    <h4>Trajectory <span class="semi-bold"> 3D</span></h4>
                    <div class="tools"> <a href="javascript:;" class="collapse"></a> <a href="#grid-config" data-toggle="modal" class="config"></a> <a href="javascript:;" class="reload"></a> <a href="javascript:;" class="remove"></a> </div>
                </div>
                <div class="grid-body">
                    <div>
                                 
                                <div id="ThreeJS" style="z-index: 1; position: relative; left:0px; top:0px; height:1000px;margin-left:auto; margin-right:auto;"></div>
<script>
       
    var xMax = 0;
    var yMax = 0;
    var zMax = 0;
    
    
    {foreach item="_trajectory" from=$trajectory name="maxis"}
    var xtMax = {$_trajectory.xMax/10};
    var ytMax = {$_trajectory.yMax/10};
    var ztMax = {$_trajectory.zMax/10};
   
    
    if (xtMax < xMax) xMax = xtMax;
    if (ytMax < yMax) yMax = ytMax;
    if (ztMax < zMax) zMax = ztMax;
    
    {/foreach}
    {literal}
// standard global variables
var container, scene, camera, renderer, controls, stats;
var keyboard = new THREEx.KeyboardState();
var clock = new THREE.Clock();
var lookAtScene = true;
// custom global variables
var line = new Array();
var mesh;

if (xMax > yMax) var MMax = yMax;
if (xMax < yMax) var MMax = xMax;

if ( Math.abs(zMax) >  Math.abs(MMax)) var MMax = zMax;

console.log(zMax);

var MMax2 = 300;
showHorizonPlatform = 'top';

var realZMax = 0;
var realBottom = 0;
init();
animate();

// FUNCTIONS 		
function init() 
{
	// SCENE
	scene = new THREE.Scene();
	// CAMERA
        console.log("wielko≈õci diva");
        console.log($("#ThreeJS").width()   );
	var SCREEN_WIDTH = 1000, SCREEN_HEIGHT = 1000;
	var VIEW_ANGLE = 60, ASPECT = SCREEN_WIDTH / SCREEN_HEIGHT, NEAR = 0.1, FAR = 2000;
        
        //camera = new THREE.CombinedCamera(  -SCREEN_WIDTH ,-SCREEN_WIDTH , -SCREEN_HEIGHT , -SCREEN_HEIGHT , 90, 2000  );
          camera = new THREE.CombinedCamera( SCREEN_WIDTH, SCREEN_WIDTH, 70, 1, 10000, -5000, 10000 );
	//camera = new THREE.PerspectiveCamera( VIEW_ANGLE, ASPECT, NEAR, FAR);
        //camera = new THREE.OrthographicCamera(  SCREEN_WIDTH / - 1,SCREEN_WIDTH / 1, SCREEN_HEIGHT / 1, SCREEN_HEIGHT / - 1, 150, 20000 );
	scene.add(camera);
        
        //scene.position.set(7000,50,-150);
        //scene.updateMatrix();
        
        // ---------------------------
        
        
        
        // 
        
        
        
	camera.position.set(-2* MMax2,0.5*MMax2,2*MMax2);
        camera.lookAt(scene.position);
        
	//camera.lookAt({x:0,y:0,z:0});	
	// RENDERER
	if ( Detector.webgl )
		renderer = new THREE.WebGLRenderer( {antialias:true} );
	else
		renderer = new THREE.CanvasRenderer(); 
	renderer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);
	container = document.getElementById( 'ThreeJS' );
	container.appendChild( renderer.domElement );
        //container.offset().top - 20;
	// EVENTS
	//THREEx.WindowResize(renderer, camera);
	THREEx.FullScreen.bindKey({ charCode : 'm'.charCodeAt(0) });
	// CONTROLS
	controls = new THREE.OrbitControls( camera, renderer.domElement );
	// STATS
	/*stats = new Stats();
	stats.domElement.style.position = 'absolute';
	stats.domElement.style.bottom = '0px';
	stats.domElement.style.zIndex = 100;
	container.appendChild( stats.domElement );*/
        
	// LIGHT
	var light = new THREE.PointLight(0xffffff);
	light.position.set(100,250,100);
	scene.add(light);
	/*
	// FLOOR
	var floorTexture = new THREE.ImageUtils.loadTexture( 'images/checkerboard.jpg' );
	floorTexture.wrapS = floorTexture.wrapT = THREE.RepeatWrapping; 
	floorTexture.repeat.set( 10, 10 );
	var floorMaterial = new THREE.MeshBasicMaterial( { map: floorTexture, side: THREE.DoubleSide } );
	var floorGeometry = new THREE.PlaneGeometry(1000, 1000, 10, 10);
	var floor = new THREE.Mesh(floorGeometry, floorMaterial);
	floor.position.y = -0.5;
	floor.rotation.x = Math.PI / 2;
	scene.add(floor);
	*/
	// SKYBOX
	var skyBoxGeometry = new THREE.CubeGeometry( 1000, 1000, 1000 );
	var skyBoxMaterial = new THREE.MeshBasicMaterial( { color: 0x9999ff, side: THREE.BackSide } );
	var skyBox = new THREE.Mesh( skyBoxGeometry, skyBoxMaterial );
	//scene.add(skyBox);
	
        //wellColor = "0x" + wellColor.replace("#","");
        //console.log(wellColor);
        {/literal}
          var geometry = new Array(); 
           
          var material = new Array();
          allElements = new THREE.Object3D();
          {assign var="licznik" value=0}
             
        {foreach item="_trajectory" from=$trajectoryRender} 
        
        material[{$licznik}] = new THREE.LineBasicMaterial({literal}{{/literal} color: {if !empty($_trajectory.color)}'{$_trajectory.color}'{else}0x0000ff{/if} {literal}}{/literal}); 
        
        
        geometry[{$licznik}] = new THREE.Geometry();       
                                    {assign var="points" value=$_trajectory} 
                                {foreach item="_point" from=$points }
                                    {if (!empty($_point.x) && !empty($_point.y) && !empty($_point.z) && $_point.x!="#")}  
                                geometry[{$licznik}].vertices.push( new THREE.Vector3( {$_point.x/10}, {$_point.z/10},{$_point.y/10} ));
                                if (( Math.abs(realZMax) <  Math.abs({$_point.y/10})) ) realZMax = {$_point.y/10};
                                if (( Math.abs(realBottom) <  Math.abs({$_point.z/10})) ) realBottom = {$_point.z/10};
                                 {/if}
                                {/foreach} 
                               
        line[{$licznik}]  = new THREE.Line( geometry[{$licznik}] , material[{$licznik}]  ); 
        
        allElements.add( line[{$licznik}]);
         {assign var="licznik" value=$licznik+1}
        {/foreach}
            console.log( realZMax);
            console.log( realBottom);
        {literal}
	////////////
	// CUSTOM //
	////////////
	step = 10;
	var geometry = new THREE.SphereGeometry( 30, 32, 16 );
	var material = new THREE.MeshLambertMaterial( { color: 0x000088 } );
	mesh = new THREE.Mesh( geometry, material );
	mesh.position.set(40,40,40);
	//scene.add(mesh);
	
	var axes = new THREE.AxisHelper(50);
	//axes.position = mesh.position;
	//scene.add(axes);
        allElements.add(axes);
	
        materialLine = new THREE.LineBasicMaterial({ color: 0xDBDBDB }); 
        
        florPlane = new THREE.Object3D();
        topPlane = new THREE.Object3D();
        planeOX = new THREE.Object3D();
        planeOY = new THREE.Object3D();
        
	drawNewNet(100);
	
       
        var origin = new THREE.Vector3(50,100,50);
	var terminus  = new THREE.Vector3(75,75,75);
	var direction = new THREE.Vector3().subVectors(terminus, origin).normalize();
	var arrow = new THREE.ArrowHelper(direction, origin, 50, 0x884400);
	//scene.add(arrow);
	
        
        //i = zMax;
        for(var i=0;i > realBottom;i=i-step){
            var spritey = makeTextSprite( -i* 10, { fontsize: 12, color: { r:0, g:0, b:255, a:1.0 } } );
            spritey.position.set(0,i,realZMax);
            //scene.add( spritey );
            allElements.add(spritey);
        }
        
        for(var i=0;i > realBottom;i=i-step){
            var spritey = makeTextSprite( -i* 10, { fontsize: 12, color: { r:0, g:255, b:0, a:1.0 } } );
            spritey.position.set(0,i,0);
            //scene.add( spritey );
            allElements.add(spritey);
        }
        
        for(var i=0;i > realBottom;i=i-step){
            var spritey = makeTextSprite( -i* 10, { fontsize: 12, color: { r:255, g:0, b:0, a:1.0 }} );
            spritey.position.set(-realZMax,i,0);
            //scene.add( spritey );
            allElements.add(spritey);
        }
        
         //spritey.position.set(0,zMax/2 ,MMax);
        //scene.add( spritey );
        
	//window.addEventListener( 'resize', onWindowResize, false );
        scene.add(allElements);
        
         //spritey.position.set(0,zMax/2 ,MMax);
        //scene.add( spritey );
        
	//window.addEventListener( 'resize', onWindowResize, false );

    }


function makeTextSprite( message, parameters ){
    if ( parameters === undefined ) parameters = {};
    var fontface = parameters.hasOwnProperty("fontface") ?
    parameters["fontface"] : "Arial";
    var fontsize = parameters.hasOwnProperty("fontsize") ?
    parameters["fontsize"] : 14;
    var borderThickness = parameters.hasOwnProperty("borderThickness") ?
    parameters["borderThickness"] : 2;
    var borderColor = parameters.hasOwnProperty("borderColor") ?
    parameters["borderColor"] : { r:0, g:0, b:0, a:1.0 };
    var backgroundColor = parameters.hasOwnProperty("backgroundColor") ?
    parameters["backgroundColor"] : { r:255, g:255, b:255, a:1.0 };
    var color = parameters.hasOwnProperty("color") ?
    parameters["color"] : { r:0, g:0, b:0, a:1.0 };
    var spriteAlignment = THREE.SpriteAlignment.topLeft;
    var canvas = document.createElement('canvas');
    var context = canvas.getContext('2d');
    context.font =  fontsize + "px " + fontface;
    // get size data (height depends only on font size)
    var metrics = context.measureText( message );
    var textWidth = metrics.width;
    // background color
    context.fillStyle = "rgba(" + backgroundColor.r + "," + backgroundColor.g + ","
    + backgroundColor.b + "," + backgroundColor.a + ")";
    // border color
    context.strokeStyle = "rgba(" + borderColor.r + "," + borderColor.g + ","
    + borderColor.b + "," + borderColor.a + ")";
    //context.lineWidth = borderThickness;
    //roundRect(context, borderThickness/2, borderThickness/2, textWidth + borderThickness, fontsize * 1.4 + borderThickness, 6);
    // 1.4 is extra height factor for text below baseline: g,j,p,q.
    // text color
    context.fillStyle = "rgba(" + color.r + "," + color.g + ","
    + color.b + "," + color.a + ")";
    context.fillText( message, borderThickness, fontsize + borderThickness);
    // canvas contents will be used for a texture
    var texture = new THREE.Texture(canvas)
    texture.needsUpdate = true;
    var spriteMaterial = new THREE.SpriteMaterial(
    { map: texture, useScreenCoordinates: false, alignment: spriteAlignment } );
    var sprite = new THREE.Sprite( spriteMaterial );
    sprite.scale.set(100,50,1.0);
    return sprite;
}



function onWindowResize() {

    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();

    renderer.setSize( window.innerWidth, window.innerHeight );

}

function animate() 
{
    requestAnimationFrame( animate );
	render();		
	update();
}

function update()
{
	var delta = clock.getDelta(); // seconds.
	var moveDistance = 200 * delta; // 200 pixels per second
	var rotateAngle = Math.PI / 2 * delta;   // pi/2 radians (90 degrees) per second
	
	// local coordinates

	// local transformations

	// move forwards/backwards/left/right
	if ( keyboard.pressed("W") )
		MovingCube.translateZ( -moveDistance );
	if ( keyboard.pressed("S") )
		MovingCube.translateZ(  moveDistance );
	if ( keyboard.pressed("Q") )
		MovingCube.translateX( -moveDistance );
	if ( keyboard.pressed("E") )
		MovingCube.translateX(  moveDistance );	

	// rotate left/right/up/down
	var rotation_matrix = new THREE.Matrix4().identity();
	if ( keyboard.pressed("A") )
		MovingCube.rotateOnAxis( new THREE.Vector3(0,1,0), rotateAngle);
	if ( keyboard.pressed("D") )
		MovingCube.rotateOnAxis( new THREE.Vector3(0,1,0), -rotateAngle);
	if ( keyboard.pressed("R") )
		MovingCube.rotateOnAxis( new THREE.Vector3(1,0,0), rotateAngle);
	if ( keyboard.pressed("F") )
		MovingCube.rotateOnAxis( new THREE.Vector3(1,0,0), -rotateAngle);
	
	if ( keyboard.pressed("Z") )
	{
		MovingCube.position.set(0,25.1,0);
		MovingCube.rotation.set(0,0,0);
	}
		
	// global coordinates
	if ( keyboard.pressed("left") )
		MovingCube.position.x -= moveDistance;
	if ( keyboard.pressed("right") )
		MovingCube.position.x += moveDistance;
	if ( keyboard.pressed("up") )
		MovingCube.position.z -= moveDistance;
	if ( keyboard.pressed("down") )
		MovingCube.position.z += moveDistance;
		
	controls.update();
	//stats.update();
}

function render() 
{
	if ( lookAtScene ) camera.lookAt( scene.position );
        renderer.render( scene, camera );
        
}

function drawNewNet(size){
        // remover planes 
        /*allElements.remove(planeOY);
        allElements.remove(planeOX);
        allElements.remove(florPlane);*/
        
        console.log(size);
        var step = 10;
         florPlane = new THREE.Object3D();
        for (i= - realZMax;i > realZMax;i=i-step){  // piony
            var geometryLine = new THREE.Geometry();
            geometryLine.vertices.push(new THREE.Vector3( -i, realBottom, realZMax));
            geometryLine.vertices.push(new THREE.Vector3( -i, realBottom, -realZMax));
            var line2 = new THREE.Line( geometryLine, materialLine ); 
            //scene.add( line2 ); 
            florPlane.add(line2);
        }   
        
        //var materialLine = new THREE.LineBasicMaterial({ color: 0xFF0000 }); 
       
        for (i=-realZMax;i > realZMax;i=i-step){  // poziomy
            var geometryLine = new THREE.Geometry();
            geometryLine.vertices.push(new THREE.Vector3( realZMax, realBottom, i));
            geometryLine.vertices.push(new THREE.Vector3( -realZMax, realBottom, i));
            var line2 = new THREE.Line( geometryLine, materialLine ); 
            //scene.add( line2 );
            florPlane.add(line2);
        } 
        if (showHorizonPlatform == 'bottom'){
            allElements.add(florPlane);
        }
        
        topPlane = new THREE.Object3D();
       for (i= - realZMax;i > realZMax;i=i-step){  // piony
            var geometryLine = new THREE.Geometry();
            geometryLine.vertices.push(new THREE.Vector3( -i, 0, realZMax));
            geometryLine.vertices.push(new THREE.Vector3( -i, 0, -realZMax));
            var line2 = new THREE.Line( geometryLine, materialLine );
            //scene.add( line2 ); 
            topPlane.add(line2);
        }   
        
        //var materialLine = new THREE.LineBasicMaterial({ color: 0xFF0000 }); 
       
         for (i=-realZMax;i > realZMax;i=i-step){  // poziomy
            var geometryLine = new THREE.Geometry();
            geometryLine.vertices.push(new THREE.Vector3( realZMax, 0, i));
            geometryLine.vertices.push(new THREE.Vector3( -realZMax, 0, i));
            var line2 = new THREE.Line( geometryLine, materialLine ); 
            //scene.add( line2 );
            topPlane.add(line2);
        }  
        if (showHorizonPlatform == 'top'){
            allElements.add(topPlane);
        }
        for (i=-realZMax;i > realZMax;i=i-step){  // piony
            var geometryLine = new THREE.Geometry();
            geometryLine.vertices.push(new THREE.Vector3( -i, 0, 0));
            geometryLine.vertices.push(new THREE.Vector3( -i, realBottom, 0));
            var line2 = new THREE.Line( geometryLine, materialLine ); 
            //scene.add( line2 ); 
            planeOX.add(line2);
        }   

          for (i=0;i > realBottom;i=i-step){  // poziomy
            var geometryLine = new THREE.Geometry();
            geometryLine.vertices.push(new THREE.Vector3( realZMax, i, 0));
            geometryLine.vertices.push(new THREE.Vector3( -realZMax, i, 0));
            var line2 = new THREE.Line( geometryLine, materialLine ); 
            //scene.add( line2 );
            planeOX.add(line2);
        }  
        allElements.add(planeOX);
        
	
	
        planeOY = new THREE.Object3D();
        for (i=0;i > realBottom;i=i-step){  // poziomy
            var geometryLine = new THREE.Geometry();
            geometryLine.vertices.push(new THREE.Vector3( 0, i, -realZMax));
            geometryLine.vertices.push(new THREE.Vector3( 0, i, realZMax));
            var line2 = new THREE.Line( geometryLine, materialLine ); 
            //scene.add( line2 ); 
            planeOY.add(line2);
        }    
        //var materialLine = new THREE.LineBasicMaterial({ color: 0xFF0000 }); 
        for (i=-realZMax;i > realZMax;i=i-step){  // piony
            var geometryLine = new THREE.Geometry();
            geometryLine.vertices.push(new THREE.Vector3( 0, 0, i));
            geometryLine.vertices.push(new THREE.Vector3( 0, realBottom, i));
            var line2 = new THREE.Line( geometryLine, materialLine ); 
            //scene.add( line2 ); 
            planeOY.add(line2);
        }    
        allElements.add(planeOY);
        
    
}

$(document).ready(function(){
    $("#viewSide").click(function(e){
        var vec = new THREE.Vector3( 1000, 0, 0 );
        //allElements.lookAt(vec);
        camera.toOrthographic();
        //p = new THREE.Vector3( 0, 0, 0 );
        //camera.matrixWorld.multiplyVector3( p );
        //scene.position.set(0,7000,0);
        console.log(scene.position);
        console.log(camera.position);
        console.log(allElements.position);
        console.log(allElements.rotation);
        allElements.position.x = -30;
        allElements.position.y = -60;
        allElements.position.z = 0;
        camera.position.set(428.000,-303.25533,0.1313882);
        allElements.rotation.set(0,0,0);
        controls.enabled = false;
        allElements.add(planeOY);
        allElements.remove(planeOX);
        allElements.remove(florPlane);
        controls.update();
        
    });
    
    $("#viewTop").click(function(e){
        camera.toOrthographic();
        camera.toTopView();
        //lookAtScene=false;
        camera.position.set(0.0,524.41,0.0000000);
        camera.lookAt(new THREE.Vector3(0,0,0));
        allElements.position.x = -40;
        allElements.position.y = -40;
        allElements.position.z = 0;
        allElements.rotation.set(0,0,0);
        controls.enabled = false;
        allElements.remove(planeOX);
        allElements.remove(planeOY);
        allElements.remove(topPlane);
        allElements.add(florPlane);
        //controls.enabled = false;
        
        controls.update();
       
    });
    
    $("#viewStart").click(function(e){
        camera.toPerspective();
        allElements.add(planeOX);
        allElements.add(planeOY);
        //allElements.add(florPlane);
        allElements.add(topPlane);
        allElements.remove(florPlane);
        controls.enabled = true;
        controls.update();
    });
    
    $("#dircUp").click(function(e){
        var delta = clock.getDelta(); // seconds
        var moveDistance = 100; // 200 pixels per second
        allElements.position.y += moveDistance;
        controls.update();
    });
    $("#dircDown").click(function(e){
        var delta = clock.getDelta(); // seconds
        var moveDistance = 100 ; // 200 pixels per second
        allElements.position.y -= moveDistance;
        controls.update();
    });
    $("#dircLeft").click(function(e){
        var delta = clock.getDelta(); // seconds
        var moveDistance = 100 ; // 200 pixels per second
        allElements.position.z += moveDistance;
        controls.update();
    });
    $("#dircRight").click(function(e){
        var delta = clock.getDelta(); // seconds
        var moveDistance = 100 ; // 200 pixels per second
        allElements.position.z -= moveDistance;
        controls.update();
    });
    
    $("#dircFor").click(function(e){
        var delta = clock.getDelta(); // seconds
        var moveDistance = 100 ; // 200 pixels per second
        allElements.position.x += moveDistance;
        controls.update();
    });
    $("#dircBack").click(function(e){
        var delta = clock.getDelta(); // seconds
        var moveDistance = 100 ; // 200 pixels per second
        allElements.position.x -= moveDistance;
        controls.update();
    });
    $("#ortogonic").click(function(e){
       camera.toOrthographic();
       //camera.cameraP.near = 700;
       camera.updateProjectionMatrix();
       allElements.position.x = 0;
       allElements.position.y = 0;
       allElements.position.z = 0;
       //camera.setZoom(0.5);
       controls.enabled = true;
       controls.update();
    });
    
    $("#perspective").click(function(e){
       camera.toPerspective();
       camera.setZoom(1);
       controls.enabled = true;
       controls.update();
       
    });
    $("#topLevel").click(function(e){
        allElements.add(topPlane);
        allElements.remove(florPlane);
    });
    
    $("#bottomLevel").click(function(e){
        allElements.remove(topPlane);
        allElements.add(florPlane);
    });
    
    $(".well_checkbox").change(function(e){
        //e.preventDefault();
        if ($(this).attr("checked")) {
            allElements.add(line[$(this).val()]);
            
        }
        else{
           allElements.remove(line[$(this).val()]);
             
        }    
    });
        
    
});


{/literal}
</script>
                             <div style=" display: block;float:right;position: relative; top: -1000px; z-index:999">
                            View: <br/>
                            {*<ul>
                            <li>W/S: Translate Forward/Backward
                            <li>A/D: Rotate Left/Right
                            <li>Q/E: Translate Left/Right
                            <li>R/F: Rotate Up/Down
                            <li>Arrow keys: Translate (global directions)
                            <li>Z: Reset position and rotation.
                            </ul>
                              <button id="dircUp" style="margin-left:28px">Up</button><br/>
                              <button id="dircLeft">Left</button>
                              <button id="dircRight">Right</button><br/> 
                              <button id="dircDown" style="margin-left:20px">Down</button><br/> 
                                <button id="dircFor">Forward</button> 
                              <button id="dircBack">Backward</button><br/>
                              <br/>*}
                              <button id="viewTop" class="btn btn-success btn-xs btn-mini">To Top</button>
                              <button id="viewSide" class="btn btn-success btn-xs btn-mini">To Side</button>
                              <button id="viewStart" class="btn btn-success btn-xs btn-mini">3d</button><br/>
                              
                              <br/><br/>
                              <button id="perspective" class="btn btn-success btn-xs btn-mini">Perspective</button>
                              <button id="ortogonic" class="btn btn-success btn-xs btn-mini">Orthogonal</button>
                              <br/><br/>
                              <div class="radio radio-success">
                                    <input id="topLevel" type="radio" name="optionyes" value="yes">
                                    <label for="topLevel">Ground</label>
                                    <input id="bottomLevel" type="radio" name="optionyes" value="no" checked="checked">
                                    <label for="bottomLevel">Bottom</label>
                              </div>
                              <div>
                                     {assign var="licznik" value=0}
                                          
                                        {foreach item="_trajectory" from=$trajectoryRender}
                                            
                                             <div class="row-fluid">
                                                <div class="checkbox check-success">
                                                  <input name="line{$licznik}" id="wellCheckBox{$licznik}" class="well_checkbox" type="checkbox" value="{$licznik}" checked="checked">
                                                  <label for="wellCheckBox{$licznik}">{$_trajectory.wellName}</label>
                                                </div>
                                              </div>

                                            {assign var="licznik" value=$licznik+1}
                                        {/foreach}    
                              </div>

                              
                            </div>  
                            </div>
                        </div>
                    </div>
                </div>
    </div>
    {/if}
    